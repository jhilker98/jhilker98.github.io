<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Jacob's Website</title><link>https://jhilker1.github.io/tags/programming/</link><description> Recent Content on Programming</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Mon, 23 Aug 2021 23:49:00 -0400</lastBuildDate><atom:link href="https://jhilker1.github.io/tags/programming/feed.xml" rel="self" type="application/rss+xml"/><item><title>A PSA for my Org-Roam Hydra</title><link>https://jhilker1.github.io/blog/2021/08/a-psa-for-my-org-roam-hydra/</link><pubDate>Mon, 23 Aug 2021 23:49:00 -0400</pubDate><guid>https://jhilker1.github.io/blog/2021/08/a-psa-for-my-org-roam-hydra/</guid><description>&lt;p>As you might have heard by now, &lt;a href="https://github.com/org-roam/org-roam">Org-roam&lt;/a> recently updated to version 2, which allows you to set an ID for a post and a headline, and then link by those IDs. However, several functions were renamed to be more consistnt with the rst of the org-roam. This is a PSA to anyone using that you will need to edit those functions slighly for functionality. In &lt;code>jh/find-org-roam-file&lt;/code>, you will need to replace &lt;code>org-roam-find-file&lt;/code> with &lt;code>org-roam-node-find&lt;/code>, and in &lt;code>jh/org-roam-insert&lt;/code>, replace &lt;code>org-roam-insert&lt;/code> with &lt;code>org-roam-node-insert&lt;/code>. Although it&amp;rsquo;s a minor change, you wil need to run &lt;code>org-roam-db-clear&lt;/code> and &lt;code>org-roam-db-sync&lt;/code> for each directory in your hydra, just to make sure everything is up to date. While not ideal, I wanted to make sure it would work.&lt;/p></description></item><item><title>My Org-Mode Workflow</title><link>https://jhilker1.github.io/blog/2021/06/my-org-mode-workflow/</link><pubDate>Sat, 12 Jun 2021 20:46:00 -0400</pubDate><guid>https://jhilker1.github.io/blog/2021/06/my-org-mode-workflow/</guid><description>&lt;p>Although I briefly describe my workflows in the &lt;a href="https://braindump.jhilker.com">notes section&lt;/a> of my website, I wanted to go far more in-depth here on my blog vs. in the notes file. I think of it this way - a note is a quick reminder of something, while something like an article or post is more in-depth.&lt;/p>
&lt;p>I use org-mode for most of my stuff now - if I am writing a README as an example (or writing generally), I&amp;rsquo;ll use org-mode where I can, including in emails. In addition, I&amp;rsquo;ll use it for my actually organizing my day or week, although I am using Google Calendar just for better integration with my phone. (I&amp;rsquo;m still working on my orgzly configuration). I am keeping my primary org-mode files in Dropbox so that I can sync them to any device.&lt;/p>
&lt;p>The best feature of all this is my extensive use of capturing ideas, tasks, and events with &lt;code>org-capture&lt;/code>. This way, I can still heavily focus on the current task I&amp;rsquo;m working on, while still getting ideas down if I need them.&lt;/p>
&lt;h2 id="my-agenda-workflow">My Agenda Workflow&lt;/h2>
&lt;p>One of the nicest features of org-mode is the ability to create custom agenda commands for different views. And in these views, you can have different files for different sections of an agenda, or for each individual agenda view. I currently have a few org-mode files in my dropbox that I use as agenda files.&lt;/p>
&lt;div class="ox-hugo-table table-outer-bordered">
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>Filename&lt;/th>
&lt;th>Purpose&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>&lt;code>inbox.org&lt;/code>&lt;/td>
&lt;td>Where any ideas I have come in.&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>orgzly.org&lt;/code>&lt;/td>
&lt;td>Same as &lt;code>inbox.org&lt;/code>, but for any ideas I have on my phone.&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>todo.org&lt;/code>&lt;/td>
&lt;td>Keeping track of general todo items.&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>gcal.org&lt;/code>&lt;/td>
&lt;td>My personal calendar events.&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>projects.org&lt;/code>&lt;/td>
&lt;td>Where I manage small to medium size personal projects.&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>work.org&lt;/code>&lt;/td>
&lt;td>My work-related todo list.&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>work-gcal.org&lt;/code>&lt;/td>
&lt;td>My work-related calendar.&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;/div>
&lt;p>As an example, I currently have a custom agenda view that I call a dashboard - although I don&amp;rsquo;t include any projects in it, I give my projects their own dashboard since some of them can get quite big for a solo project. Excuse the windows laptop, my Linux machine is currently being repaired.&lt;/p>
&lt;figure>&lt;img src="img/org-mode-workflow-dashboard.png" width="80%"/>
&lt;/figure>
&lt;p>This is my &amp;ldquo;daily dashboard&amp;rdquo; view - everything at the top is everything with a date for today. Underneath that, I have a list of the inbox items I need to review. Underneath that, I have anything I need to follow up or read from my email, and lastly, I have a list of general todo items. Although GTD normally has you set deadlines for every little item, I feel like if I set an arbitrary deadline for something where it wouldn&amp;rsquo;t be necessary, it&amp;rsquo;s much easier for me to ignore that deadline, which in turn makes it easier for me to ignore all my deadlines. I&amp;rsquo;d rather something take longer and eventually get finished, rather than me forcing arbitrary dates on myself and eventually ignoring that date.&lt;/p>
&lt;h2 id="for-tasks">For Tasks&lt;/h2>
&lt;p>As far as actually organizing myself, my workflow is a mix of both Getting Things Done, the Pomodoro method, and my own thing, although I use both GTD and Pomodoro for slightly different reasons. I used to be more of a &amp;ldquo;just get it done, don&amp;rsquo;t worry about logging it&amp;rdquo; sort of person, but now I feel like it&amp;rsquo;s a lot easier for me to just record a task or an idea if something comes up.&lt;/p>
&lt;ol>
&lt;li>Capture a task using &lt;code>org-capture&lt;/code> and save it to the inbox.&lt;/li>
&lt;li>Continue working for the duration of the currently running timer.&lt;/li>
&lt;li>During a break, quickly glance over the inbox.&lt;/li>
&lt;li>At the end of the day, review the inbox, and refile with a &lt;a href="https://mollermara.com/blog/Fast-refiling-in-org-mode-with-hydras/">hydra&lt;/a> as appropriate.&lt;/li>
&lt;/ol>
&lt;p>I mostly use it like this because I have had trouble focusing in the past, and now I can quickly get an idea into my head and into a file so that I can get back to work and review it later. Other than that, I&amp;rsquo;ll set a pomodoro timer, clock in the task, and get to work.&lt;/p>
&lt;h2 id="for-note-taking">For Note-Taking&lt;/h2>
&lt;p>This, along with the task management system I described above, is what makes classes easier, although I&amp;rsquo;m disappointed that I didn&amp;rsquo;t implement org-mode sooner until now. I am currently using &lt;a href="https://github.com/org-roam/org-roam/">org-roam&lt;/a> to get a similar setup to what I had in &lt;a href="https://notion.so/">Notion&lt;/a> or &lt;a href="https://obsidian.md/">Obsidian&lt;/a> so that I can connect notes to past information I&amp;rsquo;ve learned. Although this is still currently in progress (mainly trying to figure out campaign notes with a similar system to what I have for my primary note-taking system), I will update this when I get something working.&lt;/p>
&lt;h2 id="for-writing">For Writing&lt;/h2>
&lt;p>Org-mode, in addition to being an excellent productivity tool, is also a very nice markup language. This means that it&amp;rsquo;s not too difficult to write something in org-mode, and export to something like a Word document or a PDF with \(\LaTeX\) or Groff if you need a manuscript.&lt;/p>
&lt;h3 id="for-the-blog">For The Blog&lt;/h3>
&lt;p>I have a few capture templates set up for various things on my site - namely, a blog post and a potential project. I am currently using &lt;a href="https://github.com/kaushalmodi/ox-hugo">Ox-Hugo&lt;/a> for publishing my org-mode files to the relevant Hugo Markdown files in the correct directory. Inside my website folder for org-files, I have two separate files for handling different parts of my site.&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>Filename&lt;/th>
&lt;th>Purpose&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>&lt;code>blog.org&lt;/code>&lt;/td>
&lt;td>For any completed blog posts.&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>projects.org&lt;/code>&lt;/td>
&lt;td>For my portfolio.&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>Overall, my workflow looks a little something like this.&lt;/p>
&lt;ol>
&lt;li>Capture an idea for a blog post, and save that to &lt;code>blog.org&lt;/code> in my dropbox.&lt;/li>
&lt;li>Add a TODO item to my todo list to finish that post.&lt;/li>
&lt;li>Finish writing the blog post, and refile with a hydra as appropriate.&lt;/li>
&lt;li>Publish the post with &lt;code>org-export&lt;/code>.&lt;/li>
&lt;li>Commit the changes, and push to my gitlab.&lt;/li>
&lt;/ol>
&lt;h2 id="for-outlining-longer-works--campaigns-novels-etc--dot">For Outlining Longer Works (Campaigns, Novels, etc).&lt;/h2>
&lt;p>Although I am not a very good writer, I do enjoy worldbuilding and writing campaign ideas. This is still very much in progress, but the idea is to capture an idea to a file called &lt;code>writing.org&lt;/code> in my Dropbox which acts as a sort of inbox for any writing ideas I have. It&amp;rsquo;s not perfect at all, but I am still figuring out the right workflow to have for this sort of thing. It acts fairly similarly to the way my task system does, where I review it at the end of the week and apply it to any relevant worldbuilding or writing projects I&amp;rsquo;m working on. I might try something with capturing into the current buffer I&amp;rsquo;m in, but I&amp;rsquo;m not entirely sure, though.&lt;/p></description></item><item><title>Using a Makefile With My Website</title><link>https://jhilker1.github.io/blog/2021/03/makefile-website/</link><pubDate>Fri, 12 Mar 2021 17:47:00 -0500</pubDate><guid>https://jhilker1.github.io/blog/2021/03/makefile-website/</guid><description>&lt;p>It shouldn&amp;rsquo;t be a surprise that I use Hugo as a static site generator. Not only is it fast, but it is also incredibly customizable, which is something that I find useful considering my website has so much stuff on it. In addition, being able to create shortcodes to avoid reusing code on certain pages is such a helpful tool for wikis. Finally, having support for Emacs&amp;rsquo; &lt;a href="https://orgmode.org/">Org-Mode&lt;/a> is what initially drew me to Hugo in the first place. I had tried using org-publish to try and set up a website, but had so many little issues with it that I decided to scrap it and keep looking around for a better way to set up a website. That was when I found Hugo, and decided to try it out.&lt;/p>
&lt;p>Ultimately, I found that when I was starting to create layouts and templates, typing the full &lt;code>hugo server -D --navigateToChanged&lt;/code> was just long to type (yes, lazy, I know), especially when I was debugging an error with my shortcodes and templates. Being able just to type &lt;code>make server&lt;/code> makes it much faster for me to debug code but also to get previews of code.&lt;/p>
&lt;h2 id="not-just-for-debugging">Not Just For Debugging&lt;/h2>
&lt;p>Hugo also allows for content to be created with a certain &lt;a href="https://gohugo.io/content-management/archetypes/">archetype&lt;/a> - by default, this matches the directory you are creating the content for. As an example, if I had an archetype called &lt;code>project.org&lt;/code>, if I ran &lt;code>hugo new project/hello-world.org&lt;/code> the file &lt;code>content/project/hello-world.org&lt;/code> would be created, with all the content needed for a blog post. Here&amp;rsquo;s what my org-mode project archetype looks like:&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-org" data-lang="org">&lt;span class="line">&lt;span class="cl">&lt;span class="cs">#+title&lt;/span>&lt;span class="c">: {{ replace .Name &amp;#34;-&amp;#34; &amp;#34; &amp;#34; | title }}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cs">#+draft&lt;/span>&lt;span class="c">: true&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cs">#+srclang&lt;/span>&lt;span class="c">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cs">#+srcicon&lt;/span>&lt;span class="c">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cs">#+summary&lt;/span>&lt;span class="c">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cs">#+type&lt;/span>&lt;span class="c">: project&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cs">#+featured&lt;/span>&lt;span class="c">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cs">#+layout&lt;/span>&lt;span class="c">: single&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cs">#+percDone&lt;/span>&lt;span class="c">: 0&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cs">#+lastUpdated&lt;/span>&lt;span class="c">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cs">#+docs&lt;/span>&lt;span class="c">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cs">#+projectSite&lt;/span>&lt;span class="c">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cs">#+gitlab&lt;/span>&lt;span class="c">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cs">#+github&lt;/span>&lt;span class="c">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cs">#+bitbucket&lt;/span>&lt;span class="c">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cs">#+readmore&lt;/span>&lt;span class="c">: false&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>Obviously that&amp;rsquo;s a lot of custom parameters, so I&amp;rsquo;ll try to go through line-by-line and explain what&amp;rsquo;s going on.&lt;/p>
&lt;p>The &lt;code>title&lt;/code>, &lt;code>draft&lt;/code>, &lt;code>layout&lt;/code>, &lt;code>type&lt;/code>, and &lt;code>featured&lt;/code> parameters are all easy enough to understand, I feel like. The &lt;code>srclang&lt;/code> represents the language or languages the project is written in - for my pyronsworn project, as an example, it&amp;rsquo;s written in python. The &lt;code>srcicon&lt;/code> is the icon to use to display next to the source language - it must be one of the languages or icons listed at &lt;a href="https://devicon.dev/">devicon.dev&lt;/a>. The &lt;code>percDone&lt;/code> is used to fill the progress bar across from the source language - it represents how much is approximately done on the latest release of the project. The last 4 parameters are all different links to places where the project lives - additionally, you can set up a trello link, add a trello parameter to the project frontmatter, and you can see the link to the roadmap, though that isn&amp;rsquo;t required. The &lt;code>readmore&lt;/code> variable is used to provide a way to read a little bit more about the project before trying out the project.&lt;/p>
&lt;p>While setting up a snippet could be useful for this, Hugo has the tools to do it automatically. However, the one thing I hadn&amp;rsquo;t had much luck with was using the &lt;code>read&lt;/code> command in a Makefile. Ultimately, I figured out the answer through an answer on &lt;a href="https://unix.stackexchange.com/questions/322517/read-command-not-working-in-a-makefile">the Unix StackExchange&lt;/a> which ultimately allowed me to read in user input when I ran a &lt;code>Make&lt;/code> command. So now, instead of having to run &lt;code>hugo new projects/some-project.org -k project&lt;/code>, I can just run &lt;code>make project&lt;/code> and immediately get the template set up. While not a perfect setup, it&amp;rsquo;s much easier to get going rather than using the full command or even creating an empty file in the right directory. And while I could set up different file formats in the Makefile, such as &lt;code>post.org&lt;/code>, I feel like getting the initial functionality down is much more important than bonus features.&lt;/p>
&lt;p>Here is my current Makefile for the website.&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-makefile" data-lang="makefile">&lt;span class="line">&lt;span class="cl">&lt;span class="nf">.PHONY&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="n">server&lt;/span> &lt;span class="n">post&lt;/span> &lt;span class="n">project&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nf">server&lt;/span>&lt;span class="o">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">@hugo&lt;/span> &lt;span class="err">server&lt;/span> &lt;span class="err">-D&lt;/span> &lt;span class="err">--navigateToChanged&lt;/span> &lt;span class="err">--verbose&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nf">post&lt;/span>&lt;span class="o">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nf">@echo &amp;#34;Enter the file name (include the suffix)&lt;/span>&lt;span class="o">:&lt;/span> &amp;#34; &amp;amp;&amp;amp; &lt;span class="n">read&lt;/span> &lt;span class="n">filename&lt;/span>; &lt;span class="n">hugo&lt;/span> &lt;span class="n">new&lt;/span> &lt;span class="n">blog&lt;/span>/$$&lt;span class="n">filename&lt;/span> -&lt;span class="n">k&lt;/span> &lt;span class="n">post&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nf">project&lt;/span>&lt;span class="o">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nf">@echo &amp;#34;Enter the file name (include the suffix)&lt;/span>&lt;span class="o">:&lt;/span> &amp;#34; &amp;amp;&amp;amp; &lt;span class="n">read&lt;/span> &lt;span class="n">filename&lt;/span>; &lt;span class="n">hugo&lt;/span> &lt;span class="n">new&lt;/span> &lt;span class="n">projects&lt;/span>/$$&lt;span class="n">filename&lt;/span> -&lt;span class="n">k&lt;/span> &lt;span class="n">project&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div></description></item></channel></rss>