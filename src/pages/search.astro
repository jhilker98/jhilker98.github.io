---
/** eslint-disable jsx-a11y/heading-has-content */
import BaseLayout from "@layouts/BaseLayout.astro";
import "@fontsource/ibm-plex-serif/700.css";
import "@fontsource/ibm-plex-serif/500.css";
---

<BaseLayout title="Search results" description="Search results">
  <section class="p-2">
    <!-- // eslint-disable-next-line jsx-a11y/heading-has-content -->
    <p
      class="font-serif text-4xl font-bold text-branding-black dark:text-branding-white"
      id="searchReadout">
    </p>
    <div
      class="min-h-full grid grid-rows-[1fr_auto] container mx-auto px-5 mt-4">
      <ul id="searchResults" class="divide-y-2 divide-gray-500"></ul>
    </div>
  </section>
  <script>
    // imports
    import DOMPurify from "dompurify";
    import Fuse from "fuse.js";
    import slugifyPostDate from "@lib/utils";

    let SEARCH_DATA;
    let FUSE_INSTANCE;
    const FUSE_OPTIONS = {
      includeScore: true,
      shouldSort: true,
      threshold: 0.5,
      keys: [
        {
          name: "title",
          weight: 1,
        },
        {
          name: "description",
          weight: 0.75,
        },
        {
          name: "tags",
          weight: 0.5,
        },
        {
          name: "categories",
          weight: 0.5,
        },
        {
          name: "body",
          weight: 1,
        },
      ],
    };

    const SPINNER = `<svg xmlns="http://www.w3.org/2000/svg" width="32" height="32" viewBox="0 0 24 24" class="h-10 w-10 fill-branding-blue"><path d="M12,23a9.63,9.63,0,0,1-8-9.5,9.51,9.51,0,0,1,6.79-9.1A1.66,1.66,0,0,0,12,2.81h0a1.67,1.67,0,0,0-1.94-1.64A11,11,0,0,0,12,23Z"><animateTransform attributeName="transform" dur="0.75s" repeatCount="indefinite" type="rotate" values="0 12 12;360 12 12"/></path></svg>`;

    // selectors
    const search = document.querySelector("#search");
    const searchReadout = document.querySelector("#searchReadout");
    const resultsList = document.querySelector("#searchResults");

    // functions
    function formatPostDate(d: Date) {
      const dateString = new Date(d)
        .toLocaleDateString("en-GB", {
          timeZone: "UTC",
          day: "numeric",
          month: "short",
          year: "numeric",
        })
        .split(" ");

      return `${dateString[0]} ${dateString[1]}. ${dateString[2]}`;
    }

    function slugifyPostDate(d: Date) {
      const f = {
        year: new Intl.DateTimeFormat("en-US", { year: "numeric" }),
        month: new Intl.DateTimeFormat("en-US", { month: "2-digit" }),
      };

      return `${f.year.format(d)}/${f.month.format(d)}`;
    }

    function updateDocumentTitle(search) {
      document.title = search
        ? `Search results for “${search}” | Jacob Hilker: Frontend Developer`
        : "Search the Blog";
    }

    function updateSearchReadout(search) {
      searchReadout.textContent = search
        ? `Search results for “${search}”`
        : "Search the Blog";
    }

    function updateSearchPageURL(search) {
      const url = new URL(window.location.href);
      url.searchParams.set("q", search);
      window.history.replaceState(null, "", url);
    }

    function generateSearchList(results) {
      return results
        .map((r) => {
          const { title, date, slug, description } = r.item;
          const dateAsDate = new Date(date);
          return `<li class="py-3.5 grid md:grid-cols-[18rem_auto]">
							<aside class="md:row-span-1 md:mb-0 -mb-2 align-baseline md:px-2">
              <svg class="inline-block -mt-px text-sm w-4 h-4 fill-gray-700 dark:fill-gray-400" xmlns="http://www.w3.org/2000/svg" width="32" height="32" viewBox="0 0 24 24"><path d="M19 19H5V8h14m-3-7v2H8V1H6v2H5c-1.11 0-2 .89-2 2v14a2 2 0 0 0 2 2h14a2 2 0 0 0 2-2V5a2 2 0 0 0-2-2h-1V1m-1 11h-5v5h5v-5Z"/></svg>   
              <span class="ml-1 font-bold text-sm text-gray-700 dark:text-gray-400"
      >Posted:
    </span>
     <time
      datetime="${dateAsDate.toISOString()}"
      class="font-semibold text-sm text-gray-700 dark:text-gray-400">
      ${formatPostDate(dateAsDate)}
       </time>
              </aside>
               <article class="mt-4 md:mt-0 md:ml-4">
    <h2
      class="text-2xl font-medium text-gray-900 title-font font-serif dark:text-white md:mb-2">
      ${title}
    </h2>
        <div
      class="prose prose-neutral dark:prose-invert max-w-[80ch] prose-branding-blue">
      ${description}
      </div>
       
        </article>
        
				</li>`;
        })
        .join("");
    }

    async function fetchSearchResults(search) {
      if (search.length === 0) return;
      resultsList.innerHTML = SPINNER;
      if (!SEARCH_DATA) {
        try {
          const res = await fetch("/search.json");
          if (!res.ok) {
            throw new Error("Something went wrong…please try again");
          }
          const data = await res.json();
          SEARCH_DATA = data;
        } catch (e) {
          console.error(e);
        }
      }
      if (SEARCH_DATA && !FUSE_INSTANCE) {
        FUSE_INSTANCE = new Fuse(SEARCH_DATA, FUSE_OPTIONS);
      }
      if (!FUSE_INSTANCE) return;
      const searchResult = FUSE_INSTANCE.search(search);
      resultsList.innerHTML =
        searchResult.length > 0
          ? generateSearchList(searchResult)
          : "No results found…";
    }

    // event listeners
    window.addEventListener("DOMContentLoaded", () => {
      const urlParams = DOMPurify.sanitize(
        new URLSearchParams(window.location.search).get("q"),
      );
      fetchSearchResults(urlParams);
      updateDocumentTitle(urlParams);
      updateSearchReadout(urlParams);
      search.value = urlParams;
      search.focus();
    });

    search.addEventListener("input", () => {
      const searchTerm = DOMPurify.sanitize(search.value);
      updateDocumentTitle(searchTerm);
      updateSearchReadout(searchTerm);
      fetchSearchResults(searchTerm);
      updateSearchPageURL(searchTerm);
    });
  </script>
</BaseLayout>
